CREATE VIEW `costing_ingredient_table_view` AS SELECT `custom_tbl`.`chef_id`, `custom_tbl`.`id` as 'custom_id', `gen_tbl`.`id` as 'generic_table_row_id', CASE when `gen_tbl`.`ingredient` is not NULL then `gen_tbl`.`ingredient` ELSE `custom_tbl`.`ingredient` END AS `ingredient`, CASE when `gen_tbl`.`family` is not NULL then `gen_tbl`.`family` ELSE `custom_tbl`.`family` END AS `family`, CASE when `gen_tbl`.`supplier` is not NULL then `gen_tbl`.`supplier` ELSE `custom_tbl`.`supplier` END AS `supplier`, CASE when `gen_tbl`.`quantity` is not NULL then `gen_tbl`.`quantity` ELSE `custom_tbl`.`quantity` END AS `quantity`, CASE when `gen_tbl`.`unit` is not NULL then `gen_tbl`.`unit` ELSE `custom_tbl`.`unit` END AS `unit`, CASE when `gen_tbl`.`gross_price` is not NULL then `gen_tbl`.`gross_price` ELSE `custom_tbl`.`gross_price` END AS `gross_price`, CASE when `gen_tbl`.`waste` is not NULL then `gen_tbl`.`waste` ELSE `custom_tbl`.`waste` END AS `waste`, CASE when `gen_tbl`.`net_price` is not NULL then `gen_tbl`.`net_price` ELSE `custom_tbl`.`net_price` END AS `net_price`, `custom_tbl`.`comment` as 'comment', `custom_tbl`.`chef_id` as 'is_deleted' FROM `custom_changes_ingredient` `custom_tbl` LEFT JOIN `generic_ingredient` `gen_tbl` ON `custom_tbl`.`generic_table_row_id` = `gen_tbl`.`id` UNION SELECT `custom_tbl`.`chef_id`, `custom_tbl`.`id` as 'custom_id', `gen_tbl`.`id` as 'generic_table_row_id', CASE when `gen_tbl`.`ingredient` is not NULL then `gen_tbl`.`ingredient` ELSE `custom_tbl`.`ingredient` END AS `ingredient`, CASE when `gen_tbl`.`family` is not NULL then `gen_tbl`.`family` ELSE `custom_tbl`.`family` END AS `family`, CASE when `gen_tbl`.`supplier` is not NULL then `gen_tbl`.`supplier` ELSE `custom_tbl`.`supplier` END AS `supplier`, CASE when `gen_tbl`.`quantity` is not NULL then `gen_tbl`.`quantity` ELSE `custom_tbl`.`quantity` END AS `quantity`, CASE when `gen_tbl`.`unit` is not NULL then `gen_tbl`.`unit` ELSE `custom_tbl`.`unit` END AS `unit`, CASE when `gen_tbl`.`gross_price` is not NULL then `gen_tbl`.`gross_price` ELSE `custom_tbl`.`gross_price` END AS `gross_price`, CASE when `gen_tbl`.`waste` is not NULL then `gen_tbl`.`waste` ELSE `custom_tbl`.`waste` END AS `waste`, CASE when `gen_tbl`.`net_price` is not NULL then `gen_tbl`.`net_price` ELSE `custom_tbl`.`net_price` END AS `net_price`, `custom_tbl`.`comment` as 'comment', `custom_tbl`.`chef_id` as 'is_deleted' FROM `generic_ingredient` `gen_tbl` LEFT JOIN `custom_changes_ingredient` `custom_tbl` ON `custom_tbl`.`generic_table_row_id` = `gen_tbl`.`id`;

CREATE VIEW `costing_ingredient_view` AS SELECT NULL as chef_id, generic_table_row_id as 'id', NULL as custom_id, generic_table_row_id as 'gen_id', ingredient, family, supplier, quantity, unit, gross_price, waste, net_price, comment, CASE WHEN generic_table_row_id is not NULL THEN GROUP_CONCAT(chef_id) ELSE NULL END AS 'deleted' FROM costing_ingredient_table_view WHERE generic_table_row_id is not null group by generic_table_row_id UNION SELECT chef_id, custom_id as 'id', custom_id, NULL as 'gen_id', ingredient, family, supplier, quantity, unit, gross_price, waste, net_price, comment, NULL AS deleted FROM costing_ingredient_table_view WHERE generic_table_row_id is NULL;